//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModeloDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProyectoCapasEntities : DbContext
    {
        public ProyectoCapasEntities()
            : base("name=ProyectoCapasEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbCliente> tbCliente { get; set; }
    
        public virtual ObjectResult<procCrudClientes_Result> procCrudClientes(Nullable<int> accion, string nombre, Nullable<System.DateTime> fechaNacimiento, string sexo, Nullable<long> idCliente)
        {
            var accionParameter = accion.HasValue ?
                new ObjectParameter("Accion", accion) :
                new ObjectParameter("Accion", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procCrudClientes_Result>("procCrudClientes", accionParameter, nombreParameter, fechaNacimientoParameter, sexoParameter, idClienteParameter);
        }
    
        public virtual ObjectResult<string> procCreateClientes(string nombre, Nullable<System.DateTime> fechaNacimiento, string sexo)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("procCreateClientes", nombreParameter, fechaNacimientoParameter, sexoParameter);
        }
    
        public virtual ObjectResult<string> procUpdateClientes(string nombre, Nullable<System.DateTime> fechaNacimiento, string sexo, Nullable<long> idCliente)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("procUpdateClientes", nombreParameter, fechaNacimientoParameter, sexoParameter, idClienteParameter);
        }
    
        public virtual ObjectResult<string> procDeleteClientes(Nullable<long> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("procDeleteClientes", idClienteParameter);
        }
    
        public virtual ObjectResult<procSelectClientes_Result> procSelectClientes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procSelectClientes_Result>("procSelectClientes");
        }
    }
}
